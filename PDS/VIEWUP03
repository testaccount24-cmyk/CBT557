*---------------------/*-------------------------------------------
R0       EQU   0      /*  VIEWUP03 - By Jim Moore
R1       EQU   1      /*             Concentrated Logic Inc
R2       EQU   2      /* ------------------------------------------
R3       EQU   3      /* This program is passed two addresses. It
R4       EQU   4      /* stores, translates and returns the first
R5       EQU   5      /* address passed to it in the area pointed to
R6       EQU   6      /* by the second address. It is meant to
R7       EQU   7      /* demonstrate how a "CALL BY REFERENCE" really
R8       EQU   8      /* works. Use it from any language that supports
R9       EQU   9      /* a "CALL BY REFERENCE".
R10      EQU   10     /*
R11      EQU   11     /* It uses AMODE(31), RMODE(ANY) declaratives on
R12      EQU   12     /* the CSECT. It is fully reentrant. Any address
R13      EQU   13     /* passed to it will be converted, even 24-bit
R14      EQU   14     /* addresses.
R15      EQU   15     /*
*---------------------/* ----------------------------------------------
VIEWUP03 CSECT                      /* PROGRAM-ID equivalent
VIEWUP03 AMODE 31                   /* This code uses 31-bit storage
VIEWUP03 RMODE ANY                  /* This code is 31-bit eligible
         PRINT NOGEN                /* No macro expansion in SYSPRINT
BEGIN    STM   R14,R12,12(R13)      /* Store regs in caller SAVEAREA
         LR    R12,R15              /* Get VIEWUP03 entry addr in R12
         L     R11,0(R1)            /* Load R11 with first parm address
         L     R9,4(R1)             /* Load R9 with second parm address
         USING LINKAGE,R11          /* Base 1st parm address
         USING PASSBACK,R9          /* Base 2nd parm address
         USING VIEWUP03,R12         /* Base entire program
         LA    R0,LSTORAGE          /* Get STORAGE length into R0
         GETMAIN RC,LV=(0)          /* Acquire storage
         LTR   R15,R15              /* Did I get it?
         BNZ   GETMERR              /* No, this is a problem
         LR    R10,R1               /* Storage address returned in R1
         USING STORAGE,R10          /* Base acquired storage
         ST    R13,SAVEAREA+4       /* Save caller R13 address in chain
         LA    R13,SAVEAREA         /* Point R13 at my SAVEAREA
         ST    R13,SAVEAREA+8       /* Place my SAVEAREA addr in chain
         B     MAINLINE             /* Go around literals
COPYRITE DC  CL50'VIEWUP03 -   Concentrated Logic Inc - Translate a '
         DC  CL50'passed address into "Printable Hex"   ASM->'
         DC    C' &SYSDATC '        /* --------------------------------
         DC    C' At '              /* Stamp OBJECT deck with
         DC    C' &SYSTIME '        /* date, time and name of
         DC    C' Using '           /* the assembler.
         DC    C' &SYSASM'          /* --------------------------------
MAINLINE ST    R11,DATADDR          /* Store 1st parm address value
         LA    R2,DATADDR           /* Point to it with R2
         UNPK  UNPACK(9),0(5,R2)    /* UNPK address (+1 slack byte)
         TR    UNPACK,HEXTOCHR      /* Make it "printable"
         MVC   RETDATA,UNPACK       /* Move it to 2nd address area
RETURN   L     R13,SAVEAREA+4       /* Restore caller's R13 value
         LA    R0,LSTORAGE          /* Get STORAGE length into R0
         FREEMAIN RU,LV=(0),A=(10)  /* Free STORAGE (R10-based)
GOBACK   LM    R14,R12,12(R13)      /* Restore caller's registers
         SR    R15,R15              /* Clear R15 (RC=0)
         BR    R14                  /* Back to caller's next instruc
GETMERR  LM    R14,R12,12(R13)      /* Restore caller's registers
         L     R15,8                /* Bad return-code (RC=8)
         BR    R14                  /* Back with RC=8
         DS    0F                   /* Align translate table
HEXTOCHR EQU   *-C'0'               /*
         DC    C'0123456789ABCDEF'  /* All 16 unary hex digits
         LTORG
LINKAGE  DSECT                      /* --------------------------------
         DS CL4                     /* Ignore this value
PASSBACK DSECT                      /* --------------------------------
RETDATA  DS CL8                     /* UNPK'd and TR address here
STORAGE  DSECT                      /* --------------------------------
SAVEAREA DS 18F                     /* Register save area
DATADDR  DS F                       /* Aligned storage
         DS CL1                     /* Plus an extra byte
         DS 0F                      /* Align the Unpack area
UNPACK   DS CL8                     /* Unpack here
         DS CL1                     /* Plus an extra byte
LSTORAGE EQU *-STORAGE              /* LSTORAGE = Length of DSECT
         END
